grammar Relevance
  rule stmt
    item {
      def content
        p text_value
        elements.map {|e| e.content if e.respond_to? :content }
      end
    }

    / (item (binary_operator item)+) {
      def content
        p text_value
        elements.map {|e| e.content if e.respond_to? :content }
      end
    }
  end

  rule stmt_parens
    '(' stmt ')' {
      def content
        p text_value
        [:open_paren, elements[1].content, :close_paren]
      end
    }
  end

  rule binary_operator
    whitespace op whitespace {
      def content
        p text_value
        p op
        [op.text_value]
      end
    }
  end

  rule op
    '==' / '!=' / '>=' / '<=' / '>' / '<' / '&&' / '||'
  end

  rule item
    identifier {
		  def content
        p text_value
			  [text_value.to_sym]
			end
		}

    / constant {
      def content
        p text_value
        [text_value]
      end
    }

    / stmt_parens {
      def content
        p text_value
        [elements[1].content]
      end
    }
  end

  rule constant
    number / string
  end
 
  rule identifier
    [a-zA-Z] [a-zA-Z0-9_\[\]]*
  end

  # XXX: Ask the mailing list about this one. :-/
  rule string
    double_quoted_string / single_quoted_string
  end

  rule single_quoted_string
    "'" (!"'" .)* "'" 
  end

  rule double_quoted_string
    '"' (!'"' . / '\"')* '"'
  end

  rule number
    [1-9] [0-9]*
  end

  rule whitespace
    [\s]*
  end
end

