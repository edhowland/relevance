grammar Relevance
  rule stmt
    ((item (binary_operator item)*) / stmt_parens) {
      def content
        p text_value
        elements.map {|e| e.content }
      end
    }
  end

  rule stmt_parens
    '(' stmt ')' {
      def content
        p text_value
        [:open_paren, elements[1], :close_paren]
      end
    }
  end

  rule binary_operator
    whitespace ('==' / '!=' / '>=' / '<=' / '>' / '<' / '&&' / '||') whitespace {
      def content
        p text_value
        []
      end
    }
  end

  rule item
    (identifier / number / string / stmt_parens) {
      def content
        p text_value
        [elements[1].content]
      end
    }
  end
 
  rule identifier
    [a-zA-Z] [a-zA-Z0-9_\[\]]* {
		  def content
        p text_value
			  [text_value.to_sym]
			end
		}
  end

  # XXX: Ask the mailing list about this one. :-/
  rule string
    (double_quoted_string / single_quoted_string) {
      def content
        p text_value
        [text_value]
      end
    }
  end

  rule single_quoted_string
    "'" (!"'" .)* "'" {
      def content
        p text_value
        [text_value]
      end
      }
  end

  rule double_quoted_string
    '"' (!'"' . / '\"')* '"' {
      def content
        p text_value
        [text_value]
      end

    }
  end

  rule number
    [1-9] [0-9]* {
      def content
        p text_value
        [text_value.to_i]
      end
    }
  end

  rule whitespace
    [\s]* {
      def content
        p text_value
        []
      end
    }
  end
end

